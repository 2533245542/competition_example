import numpy as np
import matplotlib
import matplotlib.pyplot as plt
def heatmap(data, row_labels, col_labels, ax=None,
            cbar_kw={}, cbarlabel="", **kwargs):
    """
    Create a heatmap from a numpy array and two lists of labels.

    Parameters
    ----------
    data
        A 2D numpy array of shape (N, M).
    row_labels
        A list or array of length N with the labels for the rows.
    col_labels
        A list or array of length M with the labels for the columns.
    ax
        A `matplotlib.axes.Axes` instance to which the heatmap is plotted.  If
        not provided, use current axes or create a new one.  Optional.
    cbar_kw
        A dictionary with arguments to `matplotlib.Figure.colorbar`.  Optional.
    cbarlabel
        The label for the colorbar.  Optional.
    **kwargs
        All other arguments are forwarded to `imshow`.
    """

    if not ax:
        ax = plt.gca()

    # Plot the heatmap
    im = ax.imshow(data, **kwargs)

    # Create colorbar
    cbar = ax.figure.colorbar(im, ax=ax, **cbar_kw)
    cbar.ax.set_ylabel(cbarlabel, rotation=-90, va="bottom")

    # We want to show all ticks...
    ax.set_xticks(np.arange(data.shape[1]))
    ax.set_yticks(np.arange(data.shape[0]))
    # ... and label them with the respective list entries.
    ax.set_xticklabels(col_labels)
    ax.set_yticklabels(row_labels)

    # Let the horizontal axes labeling appear on top.
    ax.tick_params(top=True, bottom=False,
                   labeltop=True, labelbottom=False)

    # Rotate the tick labels and set their alignment.
    plt.setp(ax.get_xticklabels(), rotation=-30, ha="right",
             rotation_mode="anchor")

    # Turn spines off and create white grid.
    for edge, spine in ax.spines.items():
        spine.set_visible(False)

    ax.set_xticks(np.arange(data.shape[1]+1)-.5, minor=True)
    ax.set_yticks(np.arange(data.shape[0]+1)-.5, minor=True)
    ax.grid(which="minor", color="w", linestyle='-', linewidth=3)
    ax.tick_params(which="minor", bottom=False, left=False)

    return im, cbar


def annotate_heatmap(im, data=None, valfmt="{x:.2f}",
                     textcolors=["black", "white"],
                     threshold=None, **textkw):
    """
    A function to annotate a heatmap.

    Parameters
    ----------
    im
        The AxesImage to be labeled.
    data
        Data used to annotate.  If None, the image's data is used.  Optional.
    valfmt
        The format of the annotations inside the heatmap.  This should either
        use the string format method, e.g. "$ {x:.2f}", or be a
        `matplotlib.ticker.Formatter`.  Optional.
    textcolors
        A list or array of two color specifications.  The first is used for
        values below a threshold, the second for those above.  Optional.
    threshold
        Value in data units according to which the colors from textcolors are
        applied.  If None (the default) uses the middle of the colormap as
        separation.  Optional.
    **kwargs
        All other arguments are forwarded to each call to `text` used to create
        the text labels.
    """

    if not isinstance(data, (list, np.ndarray)):
        data = im.get_array()

    # Normalize the threshold to the images color range.
    if threshold is not None:
        threshold = im.norm(threshold)
    else:
        threshold = im.norm(data.max())/2.

    # Set default alignment to center, but allow it to be
    # overwritten by textkw.
    kw = dict(horizontalalignment="center",
              verticalalignment="center")
    kw.update(textkw)

    # Get the formatter in case a string is supplied
    if isinstance(valfmt, str):
        valfmt = matplotlib.ticker.StrMethodFormatter(valfmt)

    # Loop over the data and create a `Text` for each "pixel".
    # Change the text's color depending on the data.
    texts = []
    for i in range(data.shape[0]):
        for j in range(data.shape[1]):
            kw.update(color=textcolors[int(im.norm(data[i, j]) > threshold)])
            text = im.axes.text(j, i, valfmt(data[i, j], None), **kw)
            texts.append(text)

    return texts

#%% data
tune_interval = [str(i) for i in [1, 3, 5, 7, 9, 12, 15, 30, 50, 70, 90]]
days_ahead = [str(i) for i in [1, 2, 3, 4, 5, 6]]

values_std = np.array([[0.10972828841753808, 0.11955974199302817, 0.1033433914005889, 0.1257784572063325, 1.4311515658771026, 0.16631427069182236],
[0.12839376088697127, 0.08546892807380008, 0.20234003591336505, 0.15850521578736113, 0.07071933436170001, 0.16423316152292636],
[0.19025653549239643, 0.1256787048907967, 0.19861629328099034, 0.36326763667190387, 0.1393450009564475, 0.23199345669300908],
[0.14265870237376807, 0.27936301356893983, 0.172957059152152, 0.20771976065365444, 0.2878619561620632, 0.22634088709143896],
[0.17666181551868437, 0.12490521303252194, 0.21647361641480242, 0.25780971137489306, 0.14145294601996705, 0.1420257081977692],
[0.14295489704503966, 0.23573848986693802, 0.11848004466791884, 0.16972271058376018, 0.1432971747487284, 0.11686788975718598],
[0.10850154298238451, 0.17354757568985948, 0.12282003571065124, 0.4069926814559684, 0.1733497298193048, 0.1590697494748153],
[0.4331653045430054, 1.5261131050375871, 0.3116020203363053, 0.3683778032711561, 0.29609907163535654, 0.36918683295215354],
[0.4709062245118008, 0.2974264972400333, 0.456191011358816, 0.2031068561478438, 0.15437190648124702, 0.3070642953793996],
[0.1206879540799, 0.5535870232032519, 0.09996481190774201, 0.4512635617651025, 0.4191596473150986, 0.4468928190502878],
[0.6326843927502103, 0.16591572642342514, 0.15563871590375988, 0.533354236191309, 0.11254320584475047, 0.20189360665920766]])


values_mean = np.array([[2.253748847242503, 2.2387695918949606, 2.3064647219201158, 2.2888077215338245, 2.755399124277756, 2.2769420080524925],
[2.4362403182817047, 2.290402980035707, 2.3413094830115586, 2.367544288223841, 2.3862714226503416, 2.2529311025775867],
[2.2691289883123247, 2.2432964444314436, 2.366317157787116, 2.4129089999087054, 2.3003832598236595, 2.3319690570660883],
[2.2395256771600414, 2.3098043433355944, 2.4105764614173255, 2.348255416813365, 2.4380786543543045, 2.349868645774667],
[2.289863577150958, 2.2459077171973467, 2.3525100635322707, 2.261652404457883, 2.3346296850963575, 2.185819283326695],
[2.2250061974272195, 2.284422700878588, 2.168619350922924, 2.2682225009754537, 2.2167480626509164, 2.1701171716301597],
[2.20481627785347, 2.1774061316451108, 2.1324715465449655, 2.272576740956317, 2.2557977748218248, 2.1995245804433203],
[2.4287972239897653, 2.87205646919317, 2.3381416751417605, 2.413955548822924, 2.405798335499734, 2.2914943511441295],
[2.367178689001793, 2.2611099646188157, 2.5130109103427407, 2.210155516931768, 2.191133093700303, 2.2152698773142587],
[2.238769503016757, 2.3335404330636633, 2.1524744370626983, 2.334816460907953, 2.453364849967275, 2.511234570178664],
[2.3775958465410842, 2.10460933058863, 2.116697864992661, 2.4152780204228175, 2.0606959554570365, 2.202244626663183]])

# values = np.array([[0.8, 2.4, 2.5, 3.9, 0.0, 4.0, 0.0],
#                    [2.4, 0.0, 4.0, 1.0, 2.7, 0.0, 0.0],
#                    [1.1, 2.4, 0.8, 4.3, 1.9, 4.4, 0.0],
#                    [0.6, 0.0, 0.3, 0.0, 3.1, 0.0, 0.0],
#                    [0.7, 1.7, 0.6, 2.6, 2.2, 6.2, 0.0],
#                    [1.3, 1.2, 0.0, 0.0, 0.0, 3.2, 5.1],
#                    [0.1, 2.0, 0.0, 1.4, 0.0, 1.9, 6.3]])
#%% execute plot
fig, ax = plt.subplots()
im, cbar = heatmap(values_mean, tune_interval, days_ahead, ax=ax, cbarlabel="MAE")
texts = annotate_heatmap(im, valfmt="{x:.2f}")

fig.tight_layout()
plt.show()

fig, ax = plt.subplots()
im, cbar = heatmap(values_std, tune_interval, days_ahead, ax=ax, cbarlabel="MAE")
texts = annotate_heatmap(im, valfmt="{x:.2f}")

fig.tight_layout()
plt.show()


#%%
# print(np.std([2.1159903396275683, 2.2200420655365805, 2.1376016128296365, 2.315600385101356, 2.3143218643482104, 2.459489349606145, 2.371458719452457, 2.2364648003402796, 2.1029989034249197, 2.2635204321578826]))
# print(np.std([2.331708301788412, 2.3779667201325156, 2.3663543774210463, 2.0810687581808303, 2.077609061175076, 2.3687743345708143, 2.1391966127036985, 2.2476537890140733, 2.104600223825318, 2.2927637401378234]))
# print(np.std([2.429696709731644, 2.1997029078614423, 2.1706639603534055, 2.350890098941073, 2.493470850396949, 2.208283593372432, 2.313565576194797, 2.203101270000772, 2.370695573952738, 2.324576678395908]))
# print(np.std([2.230807934419873, 2.220353840233231, 2.157520986931322, 2.335593012985961, 2.1593712205984383, 2.231759885793733, 2.2819732848072074, 2.4885195982466546, 2.5489883923004863, 2.233189059021339]))
# print(np.std([2.6043742070867606, 7.021457019856341, 2.308496162185123, 2.2313039557396572, 2.4350241334854617, 2.0845716175983027, 2.0254790151737336, 2.1622094365758504, 2.3850616629770998, 2.2960140320992206]))
# print(np.std([2.2833320363949343, 2.4177913653148946, 2.0593189619821475, 2.2215303824247856, 2.481016982127277, 2.190767685200029, 2.2231091602451, 2.0039669317789, 2.335215618407655, 2.5533709566491987]))
# print(np.std([2.3176450752092985, 2.5004907879709948, 2.363148408029047, 2.696556794877425, 2.37339920716167, 2.2897539832853817, 2.4047903847296164, 2.4999444859859437, 2.3132190956591367, 2.6034549599085364]))
# print(np.std([2.1734700970064162, 2.1593475771297648, 2.357921362588757, 2.2076995505734334, 2.348564192341761, 2.36805333703074, 2.222404208558335, 2.3870927547545358, 2.3754382214175402, 2.3040384989557894]))
# print(np.std([2.0949307778953754, 2.2501806471665833, 2.34312528228655, 2.4789154164734417, 2.3339877880747903, 2.353815585177853, 2.805070548287493, 2.078041601211764, 2.473245219596008, 2.201781963945728]))
# print(np.std([2.2081625727927414, 2.3539363145633643, 2.526102351852919, 2.124692567519575, 2.2934881215080236, 2.178877430816302, 2.5266726209654045, 2.399325366213835, 2.4321679416112065, 2.6320175943950415]))
# print(np.std([2.4100419391141585, 2.4626585873620073, 2.3110710582745306, 2.491074991974651, 2.3889123136270265, 2.4249768851725184, 2.3333705879382953, 2.366891535627725, 2.4301609434269213, 2.243555383985584]))
# print(np.std([2.080973348173725, 2.5138152464042625, 2.0659924772197473, 2.403365374317448, 2.238924939172767, 2.072993139092067, 2.1820034572735185, 2.121447096321184, 2.4404053934520755, 2.409390554349073]))
# print(np.std([2.219804700040415, 2.254964718267946, 2.204838940123495, 1.978901511882159, 2.2576047646498547, 2.478343721599195, 2.109753487622477, 2.1391243484357103, 2.6896218773342975, 2.358331813167697]))
# print(np.std([2.1540123214847022, 2.353744801263064, 2.3142462155845203, 2.2887498965115105, 2.1140192191917726, 2.4301737195367394, 2.196437951346411, 2.0675783663449554, 2.1060091199510063, 2.4079928330997498]))
# print(np.std([2.50356603328743, 2.3448964650817823, 2.173893515331787, 2.364530074023406, 2.598823800707994, 2.268094045156596, 2.0937755834050398, 2.7367908510933834, 2.129574027711812, 2.449227182071927]))
# print(np.std([2.35623674163187, 2.2979380550611275, 3.447635022066699, 2.346170309930057, 2.213165871084786, 2.5579139311219397, 2.373731620436071, 2.1585308122490754, 2.172296769255832, 2.2054708662495943]))
# print(np.std([2.5641040406525843, 2.4090336971351345, 2.116923692343754, 2.343241500079948, 2.4118669064321363, 2.09483371788717, 2.313129016193152, 2.1952338724493483, 2.2056277505752653, 2.3498384044881027]))
# print(np.std([2.3463281371014837, 2.296467669397193, 2.215472480989067, 2.290119916393309, 2.0332029795351305, 2.784867578506186, 2.737687325597844, 2.279830678596153, 2.113770200915908, 2.221943603628606]))
# print(np.std([2.3220949789470895, 2.264196794697922, 1.8855766670496268, 2.137018197890328, 2.467853231458619, 2.2874083589719376, 2.2797485693128574, 2.2327010989540446, 2.300717587133616, 2.2179412871843733]))
# print(np.std([2.112082869666939, 2.11003779893439, 2.484567635019602, 2.013630620028203, 2.0938253315365265, 2.3457701353090066, 2.1502577026142577, 2.8791083780209217, 2.722586266541297, 2.186176695684798]))
# print(np.std([2.42917659319793, 2.4202132200043223, 2.2578749752049294, 2.8560857726989393, 2.230630177259841, 2.5471645872639592, 2.3084916526533474, 2.4107220382142227, 2.324194262813763, 2.3212113348620034]))
# print(np.std([2.787166854477186, 2.2363266949162703, 2.069148782368911, 2.60876022241743, 2.3363271254460227, 2.40973688696607, 2.138499934015284, 2.192118525615228, 2.4163064822328013, 2.288162659678446]))
# print(np.std([2.5661295636016455, 2.295133214122967, 2.2209710691929128, 2.42386660255088, 2.2462243129634065, 3.239890359595023, 2.2562898881839804, 2.468058208200182, 2.2674475185679217, 2.396775806564129]))
# print(np.std([2.7504054283480097, 2.6171786679856734, 2.3955155534729706, 2.1950687122942165, 2.4289062466481353, 2.346290724223367, 2.5223469578202424, 2.0527679172548314, 2.083215026919874, 2.106991222779351]))
# print(np.std([2.4594325911333477, 2.3727744433267883, 2.611471395690826, 2.2020546542312553, 2.1330158815029017, 1.9888659154089856, 2.2415225764529354, 2.4648042611253316, 2.2631633324233413, 2.1615307202138636]))
# print(np.std([2.346193383226861, 2.449085447386315, 2.2879227135312274, 2.336400519144443, 2.215008425165312, 2.323933668975168, 2.247497503700518, 2.107351546842677, 2.1383166255208326, 2.007367338480111]))
# print(np.std([2.3195432433316485, 2.5440246517931047, 2.5857055960844457, 2.034040301573247, 2.3985264643733184, 2.3921399074693848, 2.6764958096929155, 2.387917953924854, 2.2174653087241802, 1.96924139835561]))
# print(np.std([2.2308626558502476, 2.1584091078626004, 2.0691478296417163, 2.3578452233110965, 2.9528096715154266, 2.1763340236670405, 2.2741813531467736, 2.348394446346096, 1.9979969973271425, 2.050542735910685]))
# print(np.std([2.309822075806833, 2.2581296383769267, 2.070351247531827, 2.4533322616180886, 2.3576420426884557, 2.3800913025170387, 2.1901069801133004, 2.5849567193236407, 2.26869294370505, 2.473171639282413]))
# print(np.std([2.4842966531134243, 2.1561297012188017, 2.1956063742644476, 2.2126025160149068, 1.9016616493815155, 2.155766104518943, 2.266720118868473, 2.2782887112968258, 2.0854999274421053, 2.1216210771475073]))
# print(np.std([2.4485083786901276, 2.2185136408490704, 2.120366889220332, 2.0537962097313787, 2.2707667805204044, 2.0747159568627156, 2.192815670555816, 2.4580721718936123, 2.3354097919583547, 2.0770964839903843]))
# print(np.std([2.0232970491451097, 2.085623941662574, 2.0992178561110735, 2.8010438406536164, 2.466191837343042, 2.0247582501647434, 2.24634919424165, 2.4661358490815646, 2.3862177123863004, 2.2453914779962054]))
# print(np.std([2.389267328375931, 2.1224579115437407, 2.1750610704259636, 2.1292768423841895, 1.9300059727102987, 2.134399299066599, 2.2762969210354203, 2.2502348526500335, 2.2100307862419304, 2.0691625247951366]))
# print(np.std([2.3913235635207206, 2.1480070866041547, 2.60732016910137, 2.25050117051352, 2.4914162702587794, 2.013321583478776, 2.214517762363229, 2.137468297390965, 2.2497971229949716, 2.178551983528052]))
# print(np.std([2.22991444314091, 2.076857405615679, 2.359066411364973, 2.3954802311676415, 2.046119255731568, 2.0125103929341215, 2.0742392044266174, 2.326288424774237, 2.262386626523635, 2.3846182308297768]))
# print(np.std([2.1812323587473226, 2.1971920500346775, 2.1675383886689326, 2.1637870062486875, 2.2148785498158827, 1.8522247239123715, 2.3226659895135198, 2.173132753643295, 2.266418958444008, 2.1621009372729025]))
# print(np.std([2.2382863740432177, 2.158050468757497, 2.1654095941160825, 2.1398389966637845, 2.299807136218597, 2.105004465568418, 2.097657981010737, 2.1656982267400644, 2.4815499648552426, 2.196859570561059]))
# print(np.std([2.273232626284836, 1.8334497188064671, 2.305104431951867, 2.071554954738218, 2.232974511328178, 2.11853630320803, 2.1670585785535286, 2.1614232380236356, 2.074576387553725, 2.5361505660026213]))
# print(np.std([2.0996616564054804, 2.0963155576431634, 2.0681183212813177, 1.9975190648962113, 2.0820217676893393, 2.306426597319826, 2.0427279579400937, 2.271345371383113, 2.355492092425498, 2.005087078465613]))
# print(np.std([2.0883000370277585, 2.00485073075386, 2.273043497354533, 2.0426238669118573, 2.2184613706297553, 3.4690790427290032, 2.1060307881071045, 2.2159868839309795, 2.1080605531150782, 2.1993306390032417]))
# print(np.std([2.249902040744852, 2.7183339271254896, 2.239427029651872, 2.1781099920428164, 2.320485318217443, 2.1280360573652373, 2.132072767870065, 2.299308259533993, 2.0500519668061346, 2.242250388860342]))
# print(np.std([2.5522860874296067, 2.2973456943120514, 1.9881189851063794, 2.138665299395096, 2.10625812000887, 2.393583010064149, 2.1214987095069904, 2.0896498291998427, 2.1851343710871123, 2.1227056983231063]))
# print(np.std([2.2784679755173887, 2.8463302652238416, 2.0272583706770564, 2.7206965979010436, 2.3911753513125844, 3.4685684348516927, 2.1193779035798377, 2.063417329779894, 2.2287488912375437, 2.1439311198167705]))
# print(np.std([2.317623738597049, 2.89126583745391, 7.385921512452194, 2.353695184598931, 2.398016589897848, 1.9435562835079376, 2.527608289682808, 2.1522991944908334, 2.1286170519877947, 2.6219610092623906]))
# print(np.std([2.7251447505469573, 2.239270510565025, 2.091867112830928, 2.2736311920360004, 3.035181561168754, 2.175259638554366, 2.248161459945847, 2.1000700935414676, 1.9701894239371, 2.5226410082911643]))
# print(np.std([3.3717456701738766, 2.3170109590553034, 2.1400430283597016, 2.5648855772444943, 2.1422097311731596, 2.0709821603013157, 2.5559562643529468, 2.1133125797734036, 2.3096454589043134, 2.5537640588907267]))
# print(np.std([2.42967858427027, 2.295424310899304, 2.3844195620140876, 2.3186046268202354, 2.9777639427259732, 2.8914692440778915, 2.0714656319663187, 2.0331784836194324, 2.205146325658865, 2.4508326429449596]))
# print(np.std([2.368300396081493, 2.0476444174982813, 3.312402078906081, 2.0434096979796945, 2.037607388989045, 2.153777149961823, 2.506355707365738, 2.123103147517298, 2.130227755581014, 2.1921157715608257]))
# print(np.std([2.171600329774506, 2.275746091591273, 2.3825693828940566, 2.1458604052638686, 2.0253665245582804, 2.9346310110564957, 2.2783586929432755, 2.070810539686111, 3.5223571611667657, 1.8644867510832932]))
# print(np.std([1.909639293269088, 2.207563318335922, 2.045796833372964, 2.078834698666441, 2.2456450718603445, 1.956031843264502, 2.5369449506837505, 2.122860209178194, 2.706643130048231, 2.801140297508721]))
# print(np.std([2.189638893037072, 2.401132291085383, 2.3401284301128027, 2.190892251260754, 3.4478717393881104, 3.013330963678108, 2.068447791749529, 3.0662362269908523, 2.2903004278619052, 2.122130088262891]))
# print(np.std([2.2208223462636822, 1.8914802922201008, 2.005695548330994, 2.206870208019351, 2.5332929931727866, 2.4878415280544313, 2.1301305928871987, 2.0808213470332984, 2.4406138819587184, 2.103986431377117]))
# print(np.std([2.38982551841294, 2.444874924102529, 2.058600031523269, 2.3448830577868454, 2.2220463584542594, 2.145529053097304, 2.2423932860842615, 1.9979542010712334, 2.033076410871934, 2.032148095598453]))
# print(np.std([1.8797936572377707, 2.236805445068726, 1.9273059476704624, 2.2111500440900715, 2.132656355358237, 2.052370695008888, 2.5991390014089637, 2.063607385463517, 2.1057494445251526, 2.944120797310798]))
# print(np.std([2.2813345780614576, 2.1600118982382344, 2.1615934354744195, 2.2640979904874756, 2.175816583830053, 2.2201143308103553, 2.0366708143652787, 2.2181305357320755, 2.5000751651620474, 2.369849698006174]))
# print(np.std([2.174610751052535, 2.132726447793759, 2.1305874209262, 2.167170062519718, 2.1090468880696642, 1.8969595024047219, 2.2908559830946755, 2.157965421221737, 2.3122088799224083, 3.9632729736312173]))
# print(np.std([2.0434196352815874, 2.250800459244858, 2.1455294933479006, 2.0874888244986414, 2.2989234115805584, 2.1372629227221633, 2.22746314669323, 2.144073253465753, 2.2364775847398906, 1.9533056390523977]))
# print(np.std([2.1597204287945404, 3.633754306357471, 2.0076205401149485, 2.409004579862178, 2.243890235388144, 2.23842985804319, 2.329927466636804, 2.0763134912659194, 1.9957772342349307, 2.2537264683814042]))
# print(np.std([2.5134184080224924, 2.4673446824181102, 2.436217739354635, 2.2575366977790514, 2.152674066422547, 2.1409648539726707, 3.3294080429384767, 2.017883616067599, 3.119439428217824, 2.098760964479345]))
# print(np.std([2.135021753337923, 2.2890100492543906, 2.469479721662708, 2.0926091708959347, 2.642318713030599, 2.2661042686183017, 2.9617761811837244, 2.2825396722955937, 2.3369570863474776, 3.6365290851599807]))
# print(np.std([1.939597473432921, 2.036585678923977, 1.911410780257962, 2.648554441180315, 3.2663493317602628, 3.81253426293128, 2.1702368678212753, 1.8892771530800858, 1.8776162586525402, 2.22379621737022]))
# print(np.std([1.9872698035629652, 1.9794267971257025, 1.8985851274472092, 2.023525910274891, 2.4242928862658126, 2.402015797323308, 2.027875852226517, 2.113759595928581, 2.095910079800639, 2.093431455930678]))
# print(np.std([2.0294672935683686, 2.2697741922935553, 2.040529610342525, 1.9871971159220734, 1.9285464797411271, 1.987638073173021, 2.161529047239806, 2.0691111954260726, 2.2312987711131838, 2.4618868711068784]))
# print(np.std([2.1212470074535217, 2.1601726574980895, 2.0127643369677894, 1.9667483337737866, 2.7713379435752183, 2.1555823085865056, 2.7512179384090985, 2.4663155505340786, 1.9792807018975866, 3.768113425532502]))
# print(np.std([1.9760441768796826, 2.1916172623897827, 2.1011220292414174, 2.1938006296430013, 1.9941006094866598, 1.898374802901713, 1.9962239895773646, 2.2541803998359353, 1.9592822967369046, 2.042213357877906]))
# print(np.std([2.3977728904938806, 2.499957939584243, 2.180700804087593, 2.4302906317566024, 2.044972268572888, 2.2621123692055476, 2.3277570609722944, 1.967645072467262, 2.016932585426185, 1.8943046440653322]))

# cnnClean_i1_a1, 2.253748847242503, 0.10972828841753808
# cnnClean_i1_a2, 2.2387695918949606, 0.11955974199302817
# cnnClean_i1_a3, 2.3064647219201158, 0.1033433914005889
# cnnClean_i1_a4, 2.2888077215338245, 0.1257784572063325
# cnnClean_i1_a5, 2.755399124277756, 1.4311515658771026
# cnnClean_i1_a6, 2.2769420080524925, 0.16631427069182236
#
# cnnClean_i3_a1, 2.4362403182817047, 0.12839376088697127
# cnnClean_i3_a2, 2.290402980035707, 0.08546892807380008
# cnnClean_i3_a3, 2.3413094830115586, 0.20234003591336505
# cnnClean_i3_a4, 2.367544288223841, 0.15850521578736113
# cnnClean_i3_a5, 2.3862714226503416, 0.07071933436170001
# cnnClean_i3_a6, 2.2529311025775867, 0.16423316152292636
#
# cnnClean_i5_a1, 2.2691289883123247, 0.19025653549239643
# cnnClean_i5_a2, 2.2432964444314436, 0.1256787048907967
# cnnClean_i5_a3, 2.366317157787116, 0.19861629328099034
# cnnClean_i5_a4, 2.4129089999087054, 0.36326763667190387
# cnnClean_i5_a5, 2.3003832598236595, 0.1393450009564475
# cnnClean_i5_a6, 2.3319690570660883, 0.23199345669300908
#
# cnnClean_i7_a1, 2.2395256771600414, 0.14265870237376807
# cnnClean_i7_a2, 2.3098043433355944, 0.27936301356893983
# cnnClean_i7_a3, 2.4105764614173255, 0.172957059152152
# cnnClean_i7_a4, 2.348255416813365, 0.20771976065365444
# cnnClean_i7_a5, 2.4380786543543045, 0.2878619561620632
# cnnClean_i7_a6, 2.349868645774667, 0.22634088709143896
#
# cnnClean_i9_a1, 2.289863577150958, 0.17666181551868437
# cnnClean_i9_a2, 2.2459077171973467, 0.12490521303252194
# cnnClean_i9_a3, 2.3525100635322707, 0.21647361641480242
# cnnClean_i9_a4, 2.261652404457883, 0.25780971137489306
# cnnClean_i9_a5, 2.3346296850963575, 0.14145294601996705
# cnnClean_i9_a6, 2.185819283326695, 0.1420257081977692
#
# cnnClean_i12_a1, 2.2250061974272195, 0.14295489704503966
# cnnClean_i12_a2, 2.284422700878588, 0.23573848986693802
# cnnClean_i12_a3, 2.168619350922924, 0.11848004466791884
# cnnClean_i12_a4, 2.2682225009754537, 0.16972271058376018
# cnnClean_i12_a5, 2.2167480626509164, 0.1432971747487284
# cnnClean_i12_a6, 2.1701171716301597, 0.11686788975718598
#
# cnnClean_i15_a1, 2.20481627785347, 0.10850154298238451
# cnnClean_i15_a2, 2.1774061316451108, 0.17354757568985948
# cnnClean_i15_a3, 2.1324715465449655, 0.12282003571065124
# cnnClean_i15_a4, 2.272576740956317, 0.4069926814559684
# cnnClean_i15_a5, 2.2557977748218248, 0.1733497298193048
# cnnClean_i15_a6, 2.1995245804433203, 0.1590697494748153
#
# cnnClean_i30_a1, 2.4287972239897653, 0.4331653045430054
# cnnClean_i30_a2, 2.87205646919317, 1.5261131050375871
# cnnClean_i30_a3, 2.3381416751417605, 0.3116020203363053
# cnnClean_i30_a4, 2.413955548822924, 0.3683778032711561
# cnnClean_i30_a5, 2.405798335499734, 0.29609907163535654
# cnnClean_i30_a6, 2.2914943511441295, 0.36918683295215354
#
# cnnClean_i50_a1, 2.367178689001793, 0.4709062245118008
# cnnClean_i50_a2, 2.2611099646188157, 0.2974264972400333
# cnnClean_i50_a3, 2.5130109103427407, 0.456191011358816
# cnnClean_i50_a4, 2.210155516931768, 0.2031068561478438
# cnnClean_i50_a5, 2.191133093700303, 0.15437190648124702
# cnnClean_i50_a6, 2.2152698773142587, 0.3070642953793996
#
# cnnClean_i70_a1, 2.238769503016757, 0.1206879540799
# cnnClean_i70_a2, 2.3335404330636633, 0.5535870232032519
# cnnClean_i70_a3, 2.1524744370626983, 0.09996481190774201
# cnnClean_i70_a4, 2.334816460907953, 0.4512635617651025
# cnnClean_i70_a5, 2.453364849967275, 0.4191596473150986
# cnnClean_i70_a6, 2.511234570178664, 0.4468928190502878
#
# cnnClean_i90_a1, 2.3775958465410842, 0.6326843927502103
# cnnClean_i90_a2, 2.10460933058863, 0.16591572642342514
# cnnClean_i90_a3, 2.116697864992661, 0.15563871590375988
# cnnClean_i90_a4, 2.4152780204228175, 0.533354236191309
# cnnClean_i90_a5, 2.0606959554570365, 0.11254320584475047
# cnnClean_i90_a6, 2.202244626663183, 0.20189360665920766
